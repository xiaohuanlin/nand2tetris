// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ALU

    // dest for A
    // for A or C instruction
    Mux16(a=instruction, b=out, sel=instruction[15], out=registerATmp);

    // for load A
    Not(in=instruction[15], out=not15);
    Or(a=not15, b=instruction[5], out=loadA);
    ARegister(in=registerATmp, load=loadA, out=registerAOut, out[0..14]=addressM);

    // calculate for AM
    Mux16(a=registerAOut, b=inM, sel=instruction[12], out=ALUAM);

    // dest for D
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=out, load=loadD, out=registerDOut);

    // for function keep D reigster not change
    And(a=instruction[11], b=instruction[15], out=zx);
    And(a=instruction[10], b=instruction[15], out=nx);
    Or(a=instruction[9], b=not15, out=zy);
    Or(a=instruction[8], b=not15, out=ny);
    And(a=instruction[7], b=instruction[15], out=f);
    And(a=instruction[6], b=instruction[15], out=no);

    ALU(x=registerDOut, y=ALUAM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=out, out=outM, zr=zr, ng=ng);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC
    // jump rules
    // jump for negative out value
    And(a=ng, b=instruction[2], out=tmp1);
    // jump for zero out value
    And(a=zr, b=instruction[1], out=tmp2);
    // jump for positive out value
    Or(a=ng, b=zr, out=tmp);
    Not(in=tmp, out=tmpnot);
    And(a=tmpnot, b=instruction[0], out=tmp3);
    // jump?
    Or(a=tmp1, b=tmp2, out=orTmp);
    Or(a=orTmp, b=tmp3, out=jumpV);
    And(a=jumpV, b=instruction[15], out=jump);
    PC(in=registerAOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}