// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int freePointer;

    /** Initializes the class. */
    function void init() {
        var Array array;
        let freePointer = 2048;
        let array = freePointer;
        let array[0] = 16383 - 2048;
        let array[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array array;
        let array = 0;
        return array[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array array;
        let array = 0;
        let array[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int pointer, freeSize, offset;
        var Array array, previous;
        let previous = -1;
        let array = freePointer;
        while (~(array = 0)) {
            let freeSize = array[0];
            // only when the remain part is valid, we will split the free block
            if (freeSize > (size + 2)) {
                let offset = freeSize - (size + 1);
                // split block
                let array[0] = offset;
                // add size to new block
                let array[offset] = size + 1;
                return array + offset + 1;
            } else {
                // use the whole block
                if (~(freeSize < (size + 1))) {
                    if (previous = -1) {
                        let freePointer = array[1];
                    } else {
                        let previous[1] = array[1];
                    }
                    let array[1] = 0;
                    return array + 1;
                }
            }
            let previous = array;
            let array = array[1];
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int pointer, size;
        let pointer = o - 1;
        let size = o[-1];
        let pointer[0] = size;
        let pointer[1] = freePointer;
        let freePointer = pointer;
        return;
    }
}
