// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array bytes;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let bytes = -1;
        } else {
            let bytes = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(bytes = -1)) {
            do bytes.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return bytes[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let bytes[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do setCharAt(length, c);
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int start, sum, negative;
        var int character;

        let start = 0;
        let sum = 0;
        let negative = 1;
        let character = charAt(start);
        if (character = 43) {
            // + sign
            let start = start + 1;
        } else {
            if (character = 45) {
                // - sign
                let start = start + 1;
                let negative = -1;
            }
        }

        while (start < length) {
            let character = charAt(start);
            if (~((character > 47) & (character < 58))) {
                // not in 0~9
                return negative * sum;
            }
            let sum = (10 * sum) + (character - 48);
            let start = start + 1;
        }
        return negative * sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int remain;
        let remain = val / 10;
        if (~(remain = 0)) {
            do setInt(remain);
            do appendChar(48 + (Math.abs(val) - (Math.abs(remain) * 10)));
        } else {
            // base condition
            let length = 0;
            if (val < 0) {
                do appendChar(45);
            }
            do appendChar(48 + Math.abs(val));
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
