// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        // use 16 bit mask to get the bit of the value
        var int sum, current, multi, mask;
        let current = Math.abs(x);
        let multi = Math.abs(y);
        let sum = 0;
        let mask = 1; 
        while (~(mask = 0)) {
            if ((mask & multi) = mask) {
                let sum = sum + current;
            }
            let current = current + current;
            let mask = mask + mask;
        }
        
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int current, previous, abs_x, abs_y;
        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);
        let current = 1;
        let previous = 0;
        while (~(Math.multiply(current, abs_y) > abs_x)) {
            let previous = current;
            let current = current + current;
        }
        if (previous = 0) {
            return 0;
        }
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            return -previous + Math.divide(abs_x - Math.multiply(previous, abs_y), -abs_y);
        }
        return previous + Math.divide(abs_x - Math.multiply(previous, abs_y), abs_y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int max_answer, min_answer, middle, tmp;
        if (x < 0) {
            return -1;
        }
        // the max answer of 16bit signed int is sqrt(2^15) 
        let max_answer = 181;
        let min_answer = 0;
        let middle = Math.divide(max_answer + min_answer, 2);
        while (~(min_answer = max_answer)) {
            let tmp = Math.multiply(middle, middle);
            if (tmp < x) {
                let min_answer = middle + 1;
                let middle = Math.divide(max_answer + min_answer, 2);
            } else {
                if (tmp > x) {
                    let max_answer = middle - 1;
                    let middle = Math.divide(max_answer + min_answer, 2);
                } else {
                    return middle;
                }
            }
        }
        return min_answer;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
