// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int max, i;
        var Array array;
        let max = 256 * 32;
        let i = 0;
        let array = 16384;
        while (i < max) {
            let array[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var Array array;
        var int offset, position, mask;
        let array = 16384;
        let offset = (y * 32) + (x / 16);
        let position = x - (16 * (x / 16));
        let mask = 1;
        while (position > 0) {
            let mask = mask + mask;
            let position = position - 1;
        }
        if (~color) {
            let mask = ~mask;
            let array[offset] = array[offset] & mask;
        } else {
            let array[offset] = array[offset] | mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x3, y3, tmp;
        var int dx, dy, origin, now;
        // make sure x1 < x2
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;

            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        if (x1 = x2) {
            let dx = 0;
        } else {
            let dx = 1;
        }

        if (y2 > y1) {
            let dy = 1;
        } else {
            if (y2 < y1) {
                let dy = -1;
            } else {
                let dy = 0;
            }
        }

        let x3 = x1;
        let y3 = y1;
        while (~(x3 = x2) | ~(y3 = y2)) {
            do Screen.drawPixel(x3, y3);

            let origin = Math.abs(y2 - y1) * (x3 - x1);
            let now = Math.abs(y3 - y1) * (x2 - x1);

            if (origin > now) {
                let y3 = y3 + dy;
            } else {
                if (origin < now) {
                    let x3 = x3 + dx;
                } else {
                    // origin = now = 0
                    if (x1 = x2) {
                        let y3 = y3 + dy;
                    } else {
                        let x3 = x3 + dx;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(x1 > x2)) {
            do Screen.drawLine(x1, y1, x1, y2);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, lineX;
        let dx = -r;
        while (~(dx > r)) {
            let lineX = x + dx;
            let dy = Math.sqrt((r * r) - (dx * dx));
            do Screen.drawLine(lineX, y - dy, lineX, y + dy);
            let dx = dx + 1;
        }
        return;
    }
}
